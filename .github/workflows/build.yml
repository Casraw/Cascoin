name: Build Cascoin (Qt6 GUI + Wallet)

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Release-Draft sofort veröffentlichen?'
        required: false
        default: 'false'
      tag:
        description: 'Tag-Name (bei manueller Ausführung)'
        required: false

jobs:
  build-linux:
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (apt)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool build-essential pkg-config curl ca-certificates \
            libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev \
            libboost-test-dev libboost-thread-dev libboost-program-options-dev libboost-dev \
            libssl-dev libzmq3-dev libminiupnpc-dev \
            libprotobuf-dev protobuf-compiler \
            libqrencode-dev \
            libsqlite3-dev \
            qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-svg-dev \
            libqt6core5compat6-dev \
            binutils ccache \
            libdb-dev libdb++-dev || true
          # Fallback: install all Boost dev libs if specific ones are insufficient on this runner
          sudo apt-get install -y libboost-all-dev || true
          # Try specific BDB package name if the generic one isn't available
          sudo apt-get install -y libdb5.3++-dev || true

      - name: Ensure ccache directory exists
        shell: bash
        run: mkdir -p ~/.ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-gcc-${{ hashFiles('configure.ac', 'src/**/*.cpp', 'src/**/*.h') }}
          restore-keys: |
            ccache-${{ runner.os }}-gcc-

      - name: Configure ccache
        shell: bash
        run: |
          ccache --zero-stats || true
          ccache --max-size=2G || true

      - name: Autogen
        shell: bash
        run: ./autogen.sh

      - name: Configure (Qt6 GUI, wallet, incompatible BDB)
        shell: bash
        run: |
          CFLAGS="-g" CXXFLAGS="-g" CC="ccache gcc" CXX="ccache g++" \
          MOC=/usr/lib/qt6/libexec/moc \
          UIC=/usr/lib/qt6/libexec/uic \
          RCC=/usr/lib/qt6/libexec/rcc \
          LRELEASE=/usr/lib/qt6/bin/lrelease \
          LUPDATE=/usr/lib/qt6/bin/lupdate \
          ./configure \
            --with-gui=qt6 \
            --with-boost=/usr \
            --with-boost-libdir=/usr/lib/x86_64-linux-gnu \
            --enable-wallet \
            --with-incompatible-bdb

      - name: Build
        shell: bash
        run: |
          export CC="ccache gcc"
          export CXX="ccache g++"
          make -j"$(nproc)"

      - name: Strip binaries (non-fatal) and keep debug symbols
        shell: bash
        run: |
          shopt -s nullglob
          bins=(src/qt/*-qt src/*coind src/*coin-cli)
          for b in "${bins[@]}"; do
            if [[ -x "$b" ]]; then
              echo "Processing $b"
              if command -v objcopy >/dev/null 2>&1; then
                objcopy --only-keep-debug "$b" "$b".debug || true
              fi
              if command -v strip >/dev/null 2>&1; then
                strip --strip-unneeded "$b" || true
              fi
              if command -v objcopy >/dev/null 2>&1; then
                objcopy --add-gnu-debuglink="$b".debug "$b" || true
              fi
            fi
          done

      - name: List built binaries
        shell: bash
        run: |
          ls -lah src || true
          ls -lah src/qt || true
          file src/qt/*-qt || true

      - name: Create Linux distribution package
        shell: bash
        run: |
          # Create distribution structure
          DIST_DIR="cascoin-linux-distribution"
          mkdir -p "$DIST_DIR"/bin
          mkdir -p "$DIST_DIR"/lib/x86_64-linux-gnu

          
          # Copy binaries
          cp src/qt/cascoin-qt "$DIST_DIR"/bin/ || true
          cp src/cascoind "$DIST_DIR"/bin/ || true
          cp src/cascoin-cli "$DIST_DIR"/bin/ || true
          cp src/cascoin-tx "$DIST_DIR"/bin/ || true
          
          # Function to copy library dependencies
          copy_lib_deps() {
            local binary="$1"
            local lib_dir="$2"
            
            if [[ ! -f "$binary" ]]; then return; fi
            
            echo "Collecting libraries for: $(basename "$binary")"
            ldd "$binary" 2>/dev/null | grep "=>" | awk '{print $3}' | while read lib; do
              if [[ -f "$lib" && "$lib" =~ ^/usr/lib|^/lib ]]; then
                lib_name=$(basename "$lib")
                if [[ ! -f "$lib_dir/$lib_name" ]]; then
                  echo "  Copying: $lib_name"
                  cp "$lib" "$lib_dir/" 2>/dev/null || true
                fi
              fi
            done
          }
          

          
          # Note: Qt6 libraries are NOT copied - they should be installed on target system
          echo "Skipping Qt6 libraries - they should be installed on target system via package manager"
          
          # Copy ONLY the exact libraries that Cascoin needs (no extras)
          echo "Copying ONLY required Cascoin libraries..."
          LIB_DIR="$DIST_DIR/lib/x86_64-linux-gnu"
          
          # Copy exact Boost libraries needed by Cascoin
          echo "  Collecting required Boost libraries..."
          boost_libs=(
            "libboost_system.so*"
            "libboost_filesystem.so*" 
            "libboost_chrono.so*"
            "libboost_thread.so*"
            "libboost_program_options.so*"
          )
          
          for boost_lib in "${boost_libs[@]}"; do
            find /usr/lib/x86_64-linux-gnu -name "$boost_lib" 2>/dev/null | while read lib; do
              if [[ -f "$lib" ]]; then
                lib_name=$(basename "$lib")
                # Only copy versioned libraries (skip .so files without version numbers)
                if [[ "$lib_name" =~ \.[0-9]+\. ]] || [[ "$lib_name" =~ \.[0-9]+$ ]]; then
                  if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                    echo "    Copying: $lib_name"
                    cp "$lib" "$LIB_DIR/" 2>/dev/null || true
                  fi
                fi
              fi
            done
          done
          
          # Copy Berkeley DB libraries (C++ interface for wallet)
          echo "  Collecting Berkeley DB libraries..."
          find /usr/lib/x86_64-linux-gnu -name "libdb_cxx-*.so*" -o -name "libdb-*.so*" 2>/dev/null | while read lib; do
            if [[ -f "$lib" ]]; then
              lib_name=$(basename "$lib")
              # Only copy versioned libraries (skip .so files without version numbers)
              if [[ "$lib_name" =~ \.[0-9]+\. ]] || [[ "$lib_name" =~ \.[0-9]+$ ]] || [[ "$lib_name" =~ -[0-9]+\. ]]; then
                if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                  echo "    Copying: $lib_name"
                  cp "$lib" "$LIB_DIR/" 2>/dev/null || true
                fi
              fi
            fi
          done
          
          # OpenSSL libraries removed - not included in distribution
          
          # Copy exact libevent libraries needed
          echo "  Collecting libevent libraries..."
          libevent_libs=(
            "libevent-*.so*"
            "libevent_pthreads-*.so*"
          )
          
          for event_lib in "${libevent_libs[@]}"; do
            find /usr/lib/x86_64-linux-gnu -name "$event_lib" 2>/dev/null | while read lib; do
              if [[ -f "$lib" ]]; then
                lib_name=$(basename "$lib")
                # Only copy versioned libraries (skip .so files without version numbers)
                if [[ "$lib_name" =~ \.[0-9]+\. ]] || [[ "$lib_name" =~ \.[0-9]+$ ]] || [[ "$lib_name" =~ -[0-9]+\. ]]; then
                  if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                    echo "    Copying: $lib_name"
                    cp "$lib" "$LIB_DIR/" 2>/dev/null || true
                  fi
                fi
              fi
            done
          done
          
          # Copy remaining required libraries
          echo "  Collecting other required libraries..."
          other_required_libs=(
            "libminiupnpc.so*"
            "libprotobuf.so*"
            "libqrencode.so*"
            "libzmq.so*"
          )
          
          for req_lib in "${other_required_libs[@]}"; do
            find /usr/lib/x86_64-linux-gnu -name "$req_lib" 2>/dev/null | while read lib; do
              if [[ -f "$lib" ]]; then
                lib_name=$(basename "$lib")
                # Only copy versioned libraries (skip .so files without version numbers)
                if [[ "$lib_name" =~ \.[0-9]+\. ]] || [[ "$lib_name" =~ \.[0-9]+$ ]]; then
                  if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                    echo "    Copying: $lib_name"
                    cp "$lib" "$LIB_DIR/" 2>/dev/null || true
                  fi
                fi
              fi
            done
          done
          
          # Create wrapper scripts
          cat > "$DIST_DIR"/bin/cascoin-qt-wrapper << 'EOF'
          #!/bin/bash
          export LD_LIBRARY_PATH="$(dirname "$0")/../lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
          exec "$(dirname "$0")/cascoin-qt" "$@"
          EOF
          
          cat > "$DIST_DIR"/bin/cascoind-wrapper << 'EOF'
          #!/bin/bash
          export LD_LIBRARY_PATH="$(dirname "$0")/../lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
          exec "$(dirname "$0")/cascoind" "$@"
          EOF
          
          chmod +x "$DIST_DIR"/bin/*wrapper
          

          
          # Installation script removed - manual installation preferred
          
          # Create README
          cat > "$DIST_DIR"/README.md << 'EOF'
          # Cascoin Core Linux Distribution Package
          
          This package contains Cascoin Core binaries with essential libraries.
          Qt6 must be installed separately via your distribution's package manager.
          
          ## Prerequisites
          
          Install Qt6 before running the GUI:
          
          ```bash
          # Ubuntu/Debian
          sudo apt-get install qt6-base-dev qt6-base-dev-tools
          
          # Fedora/RHEL
          sudo dnf install qt6-qtbase-devel
          
          # Arch Linux
          sudo pacman -S qt6-base
          ```
          
          ## Manual Installation
          
          ```bash
          # Extract the distribution package
          tar -xzf cascoin-linux-x86_64-distribution-*.tar.gz
          cd cascoin-linux-distribution
          
          # Copy to system directories (optional)
          sudo mkdir -p /opt/cascoin
          sudo cp -r bin lib /opt/cascoin/
          
          # Create symlinks (optional)
          sudo ln -sf /opt/cascoin/bin/cascoin-qt-wrapper /usr/local/bin/cascoin-qt
          sudo ln -sf /opt/cascoin/bin/cascoind-wrapper /usr/local/bin/cascoind
          sudo ln -sf /opt/cascoin/bin/cascoin-cli /usr/local/bin/cascoin-cli
          sudo ln -sf /opt/cascoin/bin/cascoin-tx /usr/local/bin/cascoin-tx
          ```
          
          ## Usage
          
          After installation:
          
          ```bash
          cascoin-qt-wrapper    # GUI wallet (requires Qt6)
          cascoind-wrapper      # Daemon
          cascoin-cli           # CLI tool
          cascoin-tx            # Transaction tool
          ```
          
          ## System Requirements
          
          - Linux x86_64
          - GLIBC 2.31+ (Ubuntu 20.04+)
          - Qt6 6.0+ (for GUI)
          - X11 or Wayland display server (for GUI)
          
          ## Included Libraries (ONLY required ones, versioned only)
          
          - Boost (system, filesystem, chrono, thread, program_options)
          - Berkeley DB (C++ interface for wallet)
          - libevent + libevent_pthreads (networking)
          - libminiupnpc (UPnP support)
          - libprotobuf (serialization)
          - libqrencode (QR code generation)
          - libzmq (ZeroMQ messaging)
          
          Note: OpenSSL libraries are not included - use system libraries.
          
          Qt6 libraries are NOT included - install via package manager.
          EOF
          
          # Show collected versioned libraries
          echo "Collected versioned libraries:"
          echo "  Boost libraries:"
          ls -la "$LIB_DIR"/libboost_*.so* 2>/dev/null | head -10 || echo "    No Boost libraries found"
          echo "  Berkeley DB libraries:"
          ls -la "$LIB_DIR"/libdb*.so* 2>/dev/null || echo "    No Berkeley DB libraries found"
          echo "  OpenSSL libraries: (not included - use system libraries)"
          echo "  Qt6 libraries: (not included - installed via package manager)"
          echo "  Other required libraries:"
          ls -la "$LIB_DIR"/libevent*.so* "$LIB_DIR"/libprotobuf*.so* "$LIB_DIR"/libzmq*.so* "$LIB_DIR"/libminiupnpc*.so* "$LIB_DIR"/libqrencode*.so* 2>/dev/null || echo "    No other libraries found"
          
          echo ""
          echo "Distribution package created:"
          echo "File structure:"
          find "$DIST_DIR" -type d | sort
          echo ""
          echo "Libraries collected:"
          ls -la "$DIST_DIR"/lib/x86_64-linux-gnu/ | head -10
          echo ""
          echo "Binaries:"
          ls -la "$DIST_DIR"/bin/
          echo ""
          total_files=$(find "$DIST_DIR" -type f 2>/dev/null | wc -l)
          echo "Total files: $total_files"
          
          # Get version and create package
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "latest")
          tar -czf "cascoin-linux-x86_64-distribution-$VERSION.tar.gz" "$DIST_DIR"/

      - name: Upload artifacts (binaries only)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-build
          path: |
            src/qt/*-qt
            src/*coind
            src/*coin-cli
          if-no-files-found: warn

      - name: Upload Linux distribution package
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-x86_64-distribution
          path: |
            cascoin-linux-x86_64-distribution-*.tar.gz
          if-no-files-found: warn

      - name: Upload debug symbols
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-debug
          path: |
            src/qt/*.debug
            src/*.debug
          if-no-files-found: ignore


  build-windows:
    runs-on: self-hosted
    timeout-minutes: 120
    env:
      HOST: x86_64-w64-mingw32
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cross-compile and depends prerequisites (apt)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool build-essential pkg-config curl ca-certificates \
            g++-mingw-w64-x86-64 mingw-w64 binutils-mingw-w64 \
            zip unzip cmake gperf \
            python3 bsdextrautils faketime libfaketime \
            rsync git \
            qt6-tools-dev qt6-tools-dev-tools

      - name: Prepare depends cache directories
        shell: bash
        run: |
          mkdir -p depends/built depends/work depends/sources depends/sdk-sources depends/${HOST} depends/stamps

      - name: Cache depends (sources)
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/sdk-sources
          key: depends-sources-${{ hashFiles('depends/packages/*.mk') }}

      - name: Cache depends (built packages)
        uses: actions/cache@v4
        with:
          path: depends/${{ env.HOST }}
          key: depends-built-${{ runner.os }}-${{ env.HOST }}-${{ hashFiles('depends/**/*.mk', 'depends/patches/**') }}
          restore-keys: |
            depends-built-${{ runner.os }}-${{ env.HOST }}-

      - name: Cache depends (built artifacts)
        uses: actions/cache@v4
        with:
          path: depends/built
          key: depends-artifacts-${{ runner.os }}-${{ env.HOST }}-${{ hashFiles('depends/**/*.mk', 'depends/patches/**') }}
          restore-keys: |
            depends-artifacts-${{ runner.os }}-${{ env.HOST }}-

      - name: Cache depends (work - experimental)
        uses: actions/cache@v4
        with:
          path: depends/work
          key: depends-work-${{ runner.os }}-${{ env.HOST }}-${{ hashFiles('depends/**/*.mk') }}-${{ github.run_id }}
          restore-keys: |
            depends-work-${{ runner.os }}-${{ env.HOST }}-${{ hashFiles('depends/**/*.mk') }}-

      # Disabled ccache for Qt depends build to avoid path complexity
      # - name: Prebuild native ccache and ensure path for depends
      #   shell: bash
      #   run: |
      #     make -C depends HOST=${HOST} native_ccache -j"$(nproc)" || true
      #     cc_path=$(find depends -type f -path "*/native/bin/ccache" | head -n1 || true)
      #     mkdir -p "depends/${HOST}/native/bin"
      #     if [[ -n "$cc_path" ]]; then
      #       ln -sf "$PWD/$cc_path" "depends/${HOST}/native/bin/ccache"
      #     fi
      #     ls -lah "depends/${HOST}/native/bin" || true

      - name: Build depends (${{ env.HOST }})
        shell: bash
        run: |
          make -C depends HOST=${HOST} -j"$(nproc)"
          # show whether native ccache was staged
          ls -lah depends/*/native/bin || true
          ls -lah depends/${HOST}

      - name: Autogen
        shell: bash
        run: ./autogen.sh

      - name: Configure (Windows ${HOST}, Qt6 GUI, wallet, incompatible BDB)
        shell: bash
        run: |
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          echo "=== Checking Qt6 tools from depends ==="
          ls -la "$PWD/depends/${HOST}/native/libexec/" | head -10
          echo "=== Checking Qt6 libraries ==="
          ls -la "$PWD/depends/x86_64-w64-mingw32/lib/" | grep -i qt || echo "No Qt libraries found"
          echo "=== Checking Qt6 includes ==="
          ls -la "$PWD/depends/x86_64-w64-mingw32/include/" | grep -i qt || echo "No Qt includes found"
          echo "=== Running configure ==="
          CFLAGS="-g -D_WIN32_WINNT=0x0601" CXXFLAGS="-g -D_WIN32_WINNT=0x0601" \
          export PATH=/usr/lib/qt6/bin:$PATH
          CPPFLAGS="-I$PWD/depends/x86_64-w64-mingw32/include" \
          LDFLAGS="-L$PWD/depends/x86_64-w64-mingw32/lib" \
          PKG_CONFIG_PATH="$PWD/depends/x86_64-w64-mingw32/lib/pkgconfig" \
          ./configure \
            --prefix=$PWD/depends/x86_64-w64-mingw32 \
            --host=x86_64-w64-mingw32 \
            --disable-tests \
            --disable-bench \
            --with-gui=qt6 \
            --with-qt-incdir=$PWD/depends/x86_64-w64-mingw32/include \
            --with-qt-libdir=$PWD/depends/x86_64-w64-mingw32/lib \
            --with-qt-bindir=$PWD/depends/x86_64-w64-mingw32/native/libexec:/usr/lib/qt6/bin \
            --with-incompatible-bdb
          echo "=== Configure completed, checking config.log for Qt6 detection ==="
          grep -A 5 -B 5 "checking for Qt" config.log || echo "Qt check not found in config.log"
          grep -A 5 -B 5 "GUI.*qt" config.log || echo "GUI check not found in config.log"
      - name: Build (Windows ${HOST})
        shell: bash
        run: |
          echo "=== Starting build ==="
          echo "Available make targets:"
          make help | head -20 || true
          echo "=== Building all targets ==="
          make -j"$(nproc)"
          echo "=== Build completed, checking what was built ==="
          echo "Files in src/:"
          ls -la src/ | head -20 || true
          echo "Files in src/qt/:"
          ls -la src/qt/ || true

      - name: Strip Windows binaries (non-fatal) and keep debug symbols
        shell: bash
        run: |
          shopt -s nullglob
          bins=(src/*.exe src/qt/*.exe)
          for b in "${bins[@]}"; do
            if [[ -f "$b" ]]; then
              echo "Processing $b"
              if command -v ${HOST}-objcopy >/dev/null 2>&1; then
                ${HOST}-objcopy --only-keep-debug "$b" "$b".debug || true
              fi
              if command -v ${HOST}-strip >/dev/null 2>&1; then
                ${HOST}-strip --strip-unneeded "$b" || true
              fi
              if command -v ${HOST}-objcopy >/dev/null 2>&1; then
                ${HOST}-objcopy --add-gnu-debuglink="$b".debug "$b" || true
              fi
            fi
          done

      - name: List built Windows binaries
        shell: bash
        run: |
          echo "=== Listing all built binaries ==="
          ls -lah src || true
          echo "=== Listing Qt GUI binaries ==="
          ls -lah src/qt || true
          echo "=== Looking for specific executables ==="
          find src -name "*.exe" -type f | head -20 || true
          echo "=== Checking for cascoin-qt.exe specifically ==="
          ls -lah src/qt/cascoin-qt.exe || echo "cascoin-qt.exe not found"
          echo "=== All .exe files in src and subdirectories ==="
          find src -name "*.exe" -exec ls -lah {} \; || true
          echo "=== Testing artifact path patterns ==="
          echo "Files matching src/qt/*-qt.exe:"
          ls -lah src/qt/*-qt.exe 2>/dev/null || echo "No files match src/qt/*-qt.exe"
          echo "Files matching src/*coind.exe:"
          ls -lah src/*coind.exe 2>/dev/null || echo "No files match src/*coind.exe"
          echo "Files matching src/*coin-cli.exe:"
          ls -lah src/*coin-cli.exe 2>/dev/null || echo "No files match src/*coin-cli.exe"

      - name: Upload Windows artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-windows-${{ env.HOST }}-build
          path: |
            src/qt/*-qt.exe
            src/*coind.exe
            src/*coin-cli.exe
            src/*coin-tx.exe
            src/*.exe
            src/qt/*.exe
          if-no-files-found: warn

      - name: Upload Windows debug symbols
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-windows-${{ env.HOST }}-debug
          path: |
            src/*.exe.debug
            src/qt/*.exe.debug
          if-no-files-found: ignore


  release:
    runs-on: self-hosted
    needs:
      - build-linux
      - build-windows
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine tag
        id: tag
        shell: bash
        run: |
          TAG=""
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            TAG="${GITHUB_REF_NAME}"
          elif [[ -n "${{ inputs.tag }}" ]]; then
            TAG="${{ inputs.tag }}"
          else
            echo "Kein Tag übergeben. Breche ab." >&2
            exit 1
          fi
          echo "value=${TAG}" >> $GITHUB_OUTPUT
          # Strip leading 'v' for versioned filenames
          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download Linux distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: cascoin-linux-x86_64-distribution
          path: release/linux

      - name: Normalize Linux artifact filename
        shell: bash
        run: |
          shopt -s nullglob
          files=(release/linux/*.tar.gz)
          if (( ${#files[@]} )); then
            mv "${files[0]}" "release/cascoin-linux-x86_64-distribution-${{ steps.tag.outputs.value }}.tar.gz"
          else
            echo "Warnung: Kein Linux-Archiv gefunden." >&2
          fi

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: cascoin-windows-x86_64-w64-mingw32-build
          path: release/windows

      - name: Package Windows ZIP
        shell: bash
        run: |
          mkdir -p release
          echo "=== Checking Windows artifacts structure ==="
          find release/windows -name "*.exe" -type f | head -10 || echo "No .exe files found"
          echo "=== Files in release/windows ==="
          ls -la release/windows/ || true
          echo "=== All files in release/windows recursively ==="
          find release/windows -type f | head -20 || true
          
          if find release/windows -name "*.exe" -type f | grep -q .; then
            echo "=== Creating Windows ZIP with all .exe files ==="
            (cd release/windows && find . -name "*.exe" -type f -exec zip -9 ../cascoin-windows-x86_64-w64-mingw32-${{ steps.tag.outputs.value }}.zip {} +)
            echo "=== ZIP contents ==="
            unzip -l release/cascoin-windows-x86_64-w64-mingw32-${{ steps.tag.outputs.value }}.zip || true
          else
            echo "Warnung: Keine Windows-EXE-Dateien gefunden." >&2
          fi

      - name: Prepare release notes
        id: notes
        shell: bash
        run: |
          NOTES_FILE=""
          CANDIDATE_1="doc/release-notes/release-notes-${{ steps.tag.outputs.version }}.md"
          CANDIDATE_2="doc/release-notes.md"
          CANDIDATE_3="doc/release-notes/release-notes.md"
          if [[ -f "$CANDIDATE_1" ]]; then
            NOTES_FILE="$CANDIDATE_1"
          elif [[ -f "$CANDIDATE_2" ]]; then
            NOTES_FILE="$CANDIDATE_2"
          elif [[ -f "$CANDIDATE_3" ]]; then
            NOTES_FILE="$CANDIDATE_3"
          fi
          if [[ -n "$NOTES_FILE" ]]; then
            # Read the file and properly escape for GitHub Actions output
            # Use a more robust approach to handle multiline content
            {
              echo "body<<EOF"
              cat "$NOTES_FILE"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "body=Release-Draft. Bitte Release Notes ergänzen." >> $GITHUB_OUTPUT
          fi

      - name: Release-Draft erstellen
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          release_name: 'V${{ steps.tag.outputs.value }}'
          tag_name: ${{ steps.tag.outputs.value }}
          body: ${{ steps.notes.outputs.body }}

      - name: Artefakt hochladen (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/cascoin-linux-x86_64-distribution-${{ steps.tag.outputs.value }}.tar.gz
          asset_name: cascoin-linux-x86_64-distribution-${{ steps.tag.outputs.value }}.tar.gz
          asset_content_type: application/gzip

      - name: Artefakt hochladen (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/cascoin-windows-x86_64-w64-mingw32-${{ steps.tag.outputs.value }}.zip
          asset_name: cascoin-windows-x86_64-w64-mingw32-${{ steps.tag.outputs.value }}.zip
          asset_content_type: application/zip

      - name: Release veröffentlichen
        if: ${{ inputs.publish == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release_id = '${{ steps.create_release.outputs.id }}';
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id,
              draft: false
            });

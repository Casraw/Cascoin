name: Build Cascoin (Qt6 GUI + Wallet)

on:
  push:
    branches: [ master, main ]
  pull_request:

jobs:
  build-linux:
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (apt)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool build-essential pkg-config curl ca-certificates \
            libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev \
            libboost-test-dev libboost-thread-dev libboost-program-options-dev libboost-dev \
            libssl-dev libzmq3-dev libminiupnpc-dev \
            libprotobuf-dev protobuf-compiler \
            libqrencode-dev \
            libsqlite3-dev \
            qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-svg-dev \
            libqt6core5compat6-dev \
            binutils ccache \
            libdb-dev libdb++-dev || true
          # Fallback: install all Boost dev libs if specific ones are insufficient on this runner
          sudo apt-get install -y libboost-all-dev || true
          # Try specific BDB package name if the generic one isn't available
          sudo apt-get install -y libdb5.3++-dev || true

      - name: Ensure ccache directory exists
        shell: bash
        run: mkdir -p ~/.ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-gcc-${{ hashFiles('configure.ac', 'src/**/*.cpp', 'src/**/*.h') }}
          restore-keys: |
            ccache-${{ runner.os }}-gcc-

      - name: Configure ccache
        shell: bash
        run: |
          ccache --zero-stats || true
          ccache --max-size=2G || true

      - name: Autogen
        shell: bash
        run: ./autogen.sh

      - name: Configure (Qt6 GUI, wallet, incompatible BDB)
        shell: bash
        run: |
          CFLAGS="-g" CXXFLAGS="-g" CC="ccache gcc" CXX="ccache g++" \
          MOC=/usr/lib/qt6/libexec/moc \
          UIC=/usr/lib/qt6/libexec/uic \
          RCC=/usr/lib/qt6/libexec/rcc \
          LRELEASE=/usr/lib/qt6/bin/lrelease \
          LUPDATE=/usr/lib/qt6/bin/lupdate \
          ./configure \
            --with-gui=qt6 \
            --with-boost=/usr \
            --with-boost-libdir=/usr/lib/x86_64-linux-gnu \
            --enable-wallet \
            --with-incompatible-bdb

      - name: Build
        shell: bash
        run: |
          export CC="ccache gcc"
          export CXX="ccache g++"
          make -j"$(nproc)"

      - name: Strip binaries (non-fatal) and keep debug symbols
        shell: bash
        run: |
          shopt -s nullglob
          bins=(src/qt/*-qt src/*coind src/*coin-cli)
          for b in "${bins[@]}"; do
            if [[ -x "$b" ]]; then
              echo "Processing $b"
              if command -v objcopy >/dev/null 2>&1; then
                objcopy --only-keep-debug "$b" "$b".debug || true
              fi
              if command -v strip >/dev/null 2>&1; then
                strip --strip-unneeded "$b" || true
              fi
              if command -v objcopy >/dev/null 2>&1; then
                objcopy --add-gnu-debuglink="$b".debug "$b" || true
              fi
            fi
          done

      - name: List built binaries
        shell: bash
        run: |
          ls -lah src || true
          ls -lah src/qt || true
          file src/qt/*-qt || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-build
          path: |
            src/qt/*-qt
            src/*coind
            src/*coin-cli
          if-no-files-found: warn

      - name: Upload debug symbols
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-debug
          path: |
            src/qt/*.debug
            src/*.debug
          if-no-files-found: ignore


  build-windows:
    runs-on: self-hosted
    timeout-minutes: 120
    env:
      HOST: x86_64-w64-mingw32
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cross-compile and depends prerequisites (apt)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool build-essential pkg-config curl ca-certificates \
            g++-mingw-w64-x86-64 mingw-w64 binutils-mingw-w64 \
            zip unzip cmake gperf \
            python3 bsdextrautils faketime libfaketime \
            rsync git \
            qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools

      - name: Prepare depends cache directories
        shell: bash
        run: |
          mkdir -p depends/built depends/work depends/sources depends/sdk-sources depends/${HOST} depends/stamps

      - name: Cache depends (sources, built artifacts, prefix)
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/work
            depends/sources
            depends/sdk-sources
            depends/${{ env.HOST }}
            depends/stamps
          key: depends-${{ runner.os }}-${{ env.HOST }}-${{ hashFiles('depends/packages/*.mk', 'depends/hosts/*.mk', 'depends/builders/*.mk') }}
          restore-keys: |
            depends-${{ runner.os }}-${{ env.HOST }}-

      # Disabled ccache for Qt depends build to avoid path complexity
      # - name: Prebuild native ccache and ensure path for depends
      #   shell: bash
      #   run: |
      #     make -C depends HOST=${HOST} native_ccache -j"$(nproc)" || true
      #     cc_path=$(find depends -type f -path "*/native/bin/ccache" | head -n1 || true)
      #     mkdir -p "depends/${HOST}/native/bin"
      #     if [[ -n "$cc_path" ]]; then
      #       ln -sf "$PWD/$cc_path" "depends/${HOST}/native/bin/ccache"
      #     fi
      #     ls -lah "depends/${HOST}/native/bin" || true

      - name: Build depends (${{ env.HOST }})
        shell: bash
        run: |
          make -C depends HOST=${HOST} -j"$(nproc)"
          # show whether native ccache was staged
          ls -lah depends/*/native/bin || true
          ls -lah depends/${HOST}

      - name: Autogen
        shell: bash
        run: ./autogen.sh

      - name: Configure (Windows ${HOST}, Qt6 GUI, wallet, incompatible BDB)
        shell: bash
        run: |
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          export PATH=/usr/lib/qt6/bin:$PATH
          CFLAGS="-g" CXXFLAGS="-g" \
          CPPFLAGS="-I$PWD/depends/${HOST}/include" \
          LDFLAGS="-L$PWD/depends/${HOST}/lib" \
          PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig" \
          ./configure \
            --prefix="$PWD/depends/${HOST}" \
            --host=${HOST} \
            --disable-tests \
            --disable-bench \
            --with-gui=qt6 \
            --with-qt-incdir="$PWD/depends/${HOST}/include" \
            --with-qt-libdir="$PWD/depends/${HOST}/lib" \
            --with-incompatible-bdb

      - name: Build (Windows ${HOST})
        shell: bash
        run: make -j"$(nproc)"

      - name: Strip Windows binaries (non-fatal) and keep debug symbols
        shell: bash
        run: |
          shopt -s nullglob
          bins=(src/*.exe src/qt/*.exe)
          for b in "${bins[@]}"; do
            if [[ -f "$b" ]]; then
              echo "Processing $b"
              if command -v ${HOST}-objcopy >/dev/null 2>&1; then
                ${HOST}-objcopy --only-keep-debug "$b" "$b".debug || true
              fi
              if command -v ${HOST}-strip >/dev/null 2>&1; then
                ${HOST}-strip --strip-unneeded "$b" || true
              fi
              if command -v ${HOST}-objcopy >/dev/null 2>&1; then
                ${HOST}-objcopy --add-gnu-debuglink="$b".debug "$b" || true
              fi
            fi
          done

      - name: List built Windows binaries
        shell: bash
        run: |
          ls -lah src || true
          ls -lah src/qt || true

      - name: Upload Windows artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-windows-${{ env.HOST }}-build
          path: |
            src/*.exe
            src/qt/*.exe
          if-no-files-found: warn

      - name: Upload Windows debug symbols
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-windows-${{ env.HOST }}-debug
          path: |
            src/*.exe.debug
            src/qt/*.exe.debug
          if-no-files-found: ignore


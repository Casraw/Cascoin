name: Build Cascoin (Qt6 GUI + Wallet)

on:
  push:
    branches: [ master, main ]
  pull_request:

jobs:
  build-linux:
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (apt)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool build-essential pkg-config curl ca-certificates \
            libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev \
            libboost-test-dev libboost-thread-dev libboost-program-options-dev libboost-dev \
            libssl-dev libzmq3-dev libminiupnpc-dev \
            libprotobuf-dev protobuf-compiler \
            libqrencode-dev \
            libsqlite3-dev \
            qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-svg-dev \
            libqt6core5compat6-dev \
            binutils ccache \
            libdb-dev libdb++-dev || true
          # Fallback: install all Boost dev libs if specific ones are insufficient on this runner
          sudo apt-get install -y libboost-all-dev || true
          # Try specific BDB package name if the generic one isn't available
          sudo apt-get install -y libdb5.3++-dev || true

      - name: Ensure ccache directory exists
        shell: bash
        run: mkdir -p ~/.ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-gcc-${{ hashFiles('configure.ac', 'src/**/*.cpp', 'src/**/*.h') }}
          restore-keys: |
            ccache-${{ runner.os }}-gcc-

      - name: Configure ccache
        shell: bash
        run: |
          ccache --zero-stats || true
          ccache --max-size=2G || true

      - name: Autogen
        shell: bash
        run: ./autogen.sh

      - name: Configure (Qt6 GUI, wallet, incompatible BDB)
        shell: bash
        run: |
          CFLAGS="-g" CXXFLAGS="-g" CC="ccache gcc" CXX="ccache g++" \
          MOC=/usr/lib/qt6/libexec/moc \
          UIC=/usr/lib/qt6/libexec/uic \
          RCC=/usr/lib/qt6/libexec/rcc \
          LRELEASE=/usr/lib/qt6/bin/lrelease \
          LUPDATE=/usr/lib/qt6/bin/lupdate \
          ./configure \
            --with-gui=qt6 \
            --with-boost=/usr \
            --with-boost-libdir=/usr/lib/x86_64-linux-gnu \
            --enable-wallet \
            --with-incompatible-bdb

      - name: Build
        shell: bash
        run: |
          export CC="ccache gcc"
          export CXX="ccache g++"
          make -j"$(nproc)"

      - name: Strip binaries (non-fatal) and keep debug symbols
        shell: bash
        run: |
          shopt -s nullglob
          bins=(src/qt/*-qt src/*coind src/*coin-cli)
          for b in "${bins[@]}"; do
            if [[ -x "$b" ]]; then
              echo "Processing $b"
              if command -v objcopy >/dev/null 2>&1; then
                objcopy --only-keep-debug "$b" "$b".debug || true
              fi
              if command -v strip >/dev/null 2>&1; then
                strip --strip-unneeded "$b" || true
              fi
              if command -v objcopy >/dev/null 2>&1; then
                objcopy --add-gnu-debuglink="$b".debug "$b" || true
              fi
            fi
          done

      - name: List built binaries
        shell: bash
        run: |
          ls -lah src || true
          ls -lah src/qt || true
          file src/qt/*-qt || true

      - name: Create Linux distribution package
        shell: bash
        run: |
          # Create distribution structure
          DIST_DIR="cascoin-linux-distribution"
          mkdir -p "$DIST_DIR"/usr/bin
          mkdir -p "$DIST_DIR"/usr/lib/x86_64-linux-gnu
          mkdir -p "$DIST_DIR"/usr/share/applications
          mkdir -p "$DIST_DIR"/usr/share/pixmaps
          mkdir -p "$DIST_DIR"/usr/lib/qt6/plugins
          
          # Copy binaries
          cp src/qt/cascoin-qt "$DIST_DIR"/usr/bin/ || true
          cp src/cascoind "$DIST_DIR"/usr/bin/ || true
          cp src/cascoin-cli "$DIST_DIR"/usr/bin/ || true
          cp src/cascoin-tx "$DIST_DIR"/usr/bin/ || true
          
          # Function to copy library dependencies
          copy_lib_deps() {
            local binary="$1"
            local lib_dir="$2"
            
            if [[ ! -f "$binary" ]]; then return; fi
            
            echo "Collecting libraries for: $(basename "$binary")"
            ldd "$binary" 2>/dev/null | grep "=>" | awk '{print $3}' | while read lib; do
              if [[ -f "$lib" && "$lib" =~ ^/usr/lib|^/lib ]]; then
                lib_name=$(basename "$lib")
                if [[ ! -f "$lib_dir/$lib_name" ]]; then
                  echo "  Copying: $lib_name"
                  cp "$lib" "$lib_dir/" 2>/dev/null || true
                fi
              fi
            done
          }
          
          # Copy libraries for all binaries
          LIB_DIR="$DIST_DIR/usr/lib/x86_64-linux-gnu"
          for binary in "$DIST_DIR"/usr/bin/*; do
            if [[ -f "$binary" ]]; then
              copy_lib_deps "$binary" "$LIB_DIR"
            fi
          done
          
          # Copy Qt6 libraries from host system
          echo "Copying Qt6 libraries..."
          find /usr/lib/x86_64-linux-gnu -name "libQt6*.so*" -exec cp {} "$LIB_DIR/" \; 2>/dev/null || true
          
          # Copy Qt6 plugins
          if [[ -d /usr/lib/x86_64-linux-gnu/qt6/plugins ]]; then
            echo "Copying Qt6 plugins..."
            cp -r /usr/lib/x86_64-linux-gnu/qt6/plugins/* "$DIST_DIR"/usr/lib/qt6/plugins/ 2>/dev/null || true
          fi
          
          # Copy only essential versioned libraries that Cascoin specifically needs
          echo "Copying Cascoin-specific versioned libraries..."
          
          # Copy specific Boost libraries with versions
          echo "  Collecting Boost libraries..."
          find /usr/lib/x86_64-linux-gnu -name "libboost_system.so*" -o \
                                          -name "libboost_filesystem.so*" -o \
                                          -name "libboost_chrono.so*" -o \
                                          -name "libboost_thread.so*" -o \
                                          -name "libboost_program_options.so*" \
                                          2>/dev/null | while read lib; do
            if [[ -f "$lib" ]]; then
              lib_name=$(basename "$lib")
              if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                echo "    Copying: $lib_name"
                cp "$lib" "$LIB_DIR/" 2>/dev/null || true
              fi
            fi
          done
          
          # Copy specific Berkeley DB libraries
          echo "  Collecting Berkeley DB libraries..."
          find /usr/lib/x86_64-linux-gnu -name "libdb-*.so*" -o \
                                          -name "libdb++-*.so*" -o \
                                          -name "libdb.so*" -o \
                                          -name "libdb++.so*" \
                                          2>/dev/null | while read lib; do
            if [[ -f "$lib" ]]; then
              lib_name=$(basename "$lib")
              if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                echo "    Copying: $lib_name"
                cp "$lib" "$LIB_DIR/" 2>/dev/null || true
              fi
            fi
          done
          
          # Copy specific OpenSSL libraries with versions
          echo "  Collecting OpenSSL libraries..."
          find /usr/lib/x86_64-linux-gnu -name "libssl.so.*" -o \
                                          -name "libcrypto.so.*" \
                                          2>/dev/null | while read lib; do
            if [[ -f "$lib" ]]; then
              lib_name=$(basename "$lib")
              if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                echo "    Copying: $lib_name"
                cp "$lib" "$LIB_DIR/" 2>/dev/null || true
              fi
            fi
          done
          
          # Copy specific networking/protocol libraries
          echo "  Collecting networking libraries..."
          cascoin_specific_libs=(
            "libevent-2.*.so*" "libevent_core-2.*.so*" "libevent_extra-2.*.so*"
            "libprotobuf.so.*" "libprotobuf-lite.so.*"
            "libminiupnpc.so.*"
            "libzmq.so.*"
            "libqrencode.so.*"
          )
          
          for pattern in "${cascoin_specific_libs[@]}"; do
            find /usr/lib/x86_64-linux-gnu -name "$pattern" 2>/dev/null | while read lib; do
              if [[ -f "$lib" ]]; then
                lib_name=$(basename "$lib")
                if [[ ! -f "$LIB_DIR/$lib_name" ]]; then
                  echo "    Copying: $lib_name"
                  cp "$lib" "$LIB_DIR/" 2>/dev/null || true
                fi
              fi
            done
          done
          
          # Create wrapper scripts
          cat > "$DIST_DIR"/usr/bin/cascoin-qt-wrapper << 'EOF'
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
          export QT_PLUGIN_PATH="/usr/lib/qt6/plugins:$QT_PLUGIN_PATH"
          exec /usr/bin/cascoin-qt "$@"
          EOF
          
          cat > "$DIST_DIR"/usr/bin/cascoind-wrapper << 'EOF'
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
          exec /usr/bin/cascoind "$@"
          EOF
          
          chmod +x "$DIST_DIR"/usr/bin/*wrapper
          
          # Create desktop entry
          cat > "$DIST_DIR"/usr/share/applications/cascoin-qt.desktop << 'EOF'
          [Desktop Entry]
          Name=Cascoin Core
          Comment=Cascoin cryptocurrency wallet
          Icon=cascoin
          Exec=/usr/bin/cascoin-qt-wrapper
          Terminal=false
          Type=Application
          Categories=Office;Finance;
          StartupWMClass=Cascoin-qt
          EOF
          
          # Copy icon if available
          if [[ -f share/pixmaps/bitcoin128.png ]]; then
            cp share/pixmaps/bitcoin128.png "$DIST_DIR"/usr/share/pixmaps/cascoin.png
          fi
          
          # Create installation script
          cat > "$DIST_DIR"/install.sh << 'EOF'
          #!/bin/bash
          
          if [[ $EUID -ne 0 ]]; then
             echo "This script must be run as root (use sudo)"
             exit 1
          fi
          
          echo "Installing Cascoin Core Linux Distribution..."
          
          # Copy all files to system directories
          cp -r usr/* /usr/
          
          # Update library cache
          echo "/usr/lib/x86_64-linux-gnu" > /etc/ld.so.conf.d/cascoin.conf
          ldconfig
          
          # Update desktop database
          if command -v update-desktop-database >/dev/null 2>&1; then
              update-desktop-database
          fi
          
          echo "Installation complete!"
          echo ""
          echo "You can now run:"
          echo "  cascoin-qt-wrapper    # GUI wallet"
          echo "  cascoind-wrapper      # Daemon"
          echo "  cascoin-cli           # CLI tool"
          echo "  cascoin-tx            # Transaction tool"
          EOF
          
          chmod +x "$DIST_DIR"/install.sh
          
          # Create README
          cat > "$DIST_DIR"/README.md << 'EOF'
          # Cascoin Core Linux Distribution Package
          
          This package contains a complete, self-contained installation of Cascoin Core
          with all required libraries included. No additional package installation required.
          
          ## Installation
          
          ```bash
          sudo ./install.sh
          ```
          
          ## Usage
          
          After installation:
          
          ```bash
          cascoin-qt-wrapper    # GUI wallet
          cascoind-wrapper      # Daemon
          cascoin-cli           # CLI tool
          cascoin-tx            # Transaction tool
          ```
          
          ## System Requirements
          
          - Linux x86_64
          - GLIBC 2.31+ (Ubuntu 20.04+)
          - X11 or Wayland display server (for GUI)
          EOF
          
          # Show collected versioned libraries
          echo "Collected versioned libraries:"
          echo "  Boost libraries:"
          ls -la "$LIB_DIR"/libboost_*.so* 2>/dev/null | head -10 || echo "    No Boost libraries found"
          echo "  Berkeley DB libraries:"
          ls -la "$LIB_DIR"/libdb*.so* 2>/dev/null || echo "    No Berkeley DB libraries found"
          echo "  OpenSSL libraries:"
          ls -la "$LIB_DIR"/libssl.so* "$LIB_DIR"/libcrypto.so* 2>/dev/null || echo "    No OpenSSL libraries found"
          echo "  Qt6 libraries:"
          ls -la "$LIB_DIR"/libQt6*.so* 2>/dev/null | head -10 || echo "    No Qt6 libraries found"
          echo "  Other specific libraries:"
          ls -la "$LIB_DIR"/libevent*.so* "$LIB_DIR"/libprotobuf*.so* "$LIB_DIR"/libzmq*.so* 2>/dev/null || echo "    No other libraries found"
          
          echo ""
          echo "Distribution package created:"
          find "$DIST_DIR" -type f | head -20
          echo "... ($(find "$DIST_DIR" -type f | wc -l) total files)"
          
          # Get version and create package
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "latest")
          tar -czf "cascoin-linux-x86_64-distribution-$VERSION.tar.gz" "$DIST_DIR"/

      - name: Upload artifacts (binaries only)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-build
          path: |
            src/qt/*-qt
            src/*coind
            src/*coin-cli
          if-no-files-found: warn

      - name: Upload Linux distribution package
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-x86_64-distribution
          path: |
            cascoin-linux-x86_64-distribution-*.tar.gz
          if-no-files-found: warn

      - name: Upload debug symbols
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cascoin-linux-debug
          path: |
            src/qt/*.debug
            src/*.debug
          if-no-files-found: ignore


  build-windows:
    runs-on: self-hosted
    timeout-minutes: 120
    env:
      HOST: x86_64-w64-mingw32
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cross-compile and depends prerequisites (apt)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool build-essential pkg-config curl ca-certificates \
            g++-mingw-w64-x86-64 mingw-w64 binutils-mingw-w64 \
            zip unzip cmake gperf \
            python3 bsdextrautils faketime libfaketime \
            rsync git \
            qt6-tools-dev qt6-tools-dev-tools

      - name: Prepare depends cache directories
        shell: bash
        run: |
          mkdir -p depends/built depends/work depends/sources depends/sdk-sources depends/${HOST} depends/stamps

      - name: Cache depends (sources, built artifacts, prefix)
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/work
            depends/sources
            depends/sdk-sources
            depends/${{ env.HOST }}
            depends/stamps
          key: depends-${{ runner.os }}-${{ env.HOST }}-${{ hashFiles('depends/packages/*.mk', 'depends/hosts/*.mk', 'depends/builders/*.mk') }}
          restore-keys: |
            depends-${{ runner.os }}-${{ env.HOST }}-

      # Disabled ccache for Qt depends build to avoid path complexity
      # - name: Prebuild native ccache and ensure path for depends
      #   shell: bash
      #   run: |
      #     make -C depends HOST=${HOST} native_ccache -j"$(nproc)" || true
      #     cc_path=$(find depends -type f -path "*/native/bin/ccache" | head -n1 || true)
      #     mkdir -p "depends/${HOST}/native/bin"
      #     if [[ -n "$cc_path" ]]; then
      #       ln -sf "$PWD/$cc_path" "depends/${HOST}/native/bin/ccache"
      #     fi
      #     ls -lah "depends/${HOST}/native/bin" || true

      - name: Build depends (${{ env.HOST }})
        shell: bash
        run: |
          make -C depends HOST=${HOST} -j"$(nproc)"
          # show whether native ccache was staged
          ls -lah depends/*/native/bin || true
          ls -lah depends/${HOST}

#      - name: Autogen
#        shell: bash
#        run: ./autogen.sh

#      - name: Configure (Windows ${HOST}, Qt6 GUI, wallet, incompatible BDB)
#        shell: bash
#        run: |
#          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
#          echo "Using Qt tools from depends:"
#          ls -la "$PWD/depends/${HOST}/native/libexec/" | head -10
#          CFLAGS="-g -D_WIN32_WINNT=0x0601" CXXFLAGS="-g -D_WIN32_WINNT=0x0601" \
#          CPPFLAGS="-I$PWD/depends/${HOST}/include" \
#          LDFLAGS="-L$PWD/depends/${HOST}/lib" \
#          PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig" \
#          MOC="$PWD/depends/${HOST}/native/libexec/moc" \
#          UIC="$PWD/depends/${HOST}/native/libexec/uic" \
#          RCC="$PWD/depends/${HOST}/native/libexec/rcc" \
#          QMAKE="$PWD/depends/${HOST}/native/bin/qmake" \
#          LRELEASE="/usr/lib/qt6/bin/lrelease" \
#          LUPDATE="/usr/lib/qt6/bin/lupdate" \
#          ./configure \
#            --prefix="$PWD/depends/${HOST}" \
#            --host=${HOST} \
#            --disable-tests \
#            --disable-bench \
#            --with-gui=qt6 \
#            --with-qt-incdir="$PWD/depends/${HOST}/include" \
#            --with-qt-libdir="$PWD/depends/${HOST}/lib" \
#            --enable-wallet \
#            --with-incompatible-bdb \
#            --enable-glibc-back-compat \
#            --disable-bench \
#            --disable-tests

#      - name: Build (Windows ${HOST})
#        shell: bash
#        run: make -j"$(nproc)"

#      - name: Strip Windows binaries (non-fatal) and keep debug symbols
#        shell: bash
#        run: |
#          shopt -s nullglob
#          bins=(src/*.exe src/qt/*.exe)
#          for b in "${bins[@]}"; do
#            if [[ -f "$b" ]]; then
#              echo "Processing $b"
#              if command -v ${HOST}-objcopy >/dev/null 2>&1; then
#                ${HOST}-objcopy --only-keep-debug "$b" "$b".debug || true
#              fi
#              if command -v ${HOST}-strip >/dev/null 2>&1; then
#                ${HOST}-strip --strip-unneeded "$b" || true
#              fi
#              if command -v ${HOST}-objcopy >/dev/null 2>&1; then
#                ${HOST}-objcopy --add-gnu-debuglink="$b".debug "$b" || true
#              fi
#            fi
#          done

#      - name: List built Windows binaries
#        shell: bash
#        run: |
#          ls -lah src || true
#          ls -lah src/qt || true

#      - name: Upload Windows artifacts
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: cascoin-windows-${{ env.HOST }}-build
#          path: |
#            src/*.exe
#            src/qt/*.exe
#          if-no-files-found: warn

#      - name: Upload Windows debug symbols
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: cascoin-windows-${{ env.HOST }}-debug
#          path: |
#            src/*.exe.debug
#            src/qt/*.exe.debug
#          if-no-files-found: ignore

